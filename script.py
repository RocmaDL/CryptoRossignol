from PIL import Image

def cacher(i, b):
    return i-(i%2)+b

def trouver(i):
    return i%2

def analyse(image):
    i = Image.open(image)
    liste_pixels = []
    for x in range(i.size[0]):
        for y in range(i.size[1]):
            pixel = i.getpixel((x, y))
            liste_pixels.append(pixel)
    return liste_pixels

def int_to_bin(i):
    return bin(i)[2:].zfill(8)

def bit_poids_faible(i):
    return int_to_bin(i)[-1]

def pixel_binaire_different(img1, img2):
    liste1 = analyse(img1)
    liste2 = analyse(img2)
    binaire_pixel = []
    for pixel1, pixel2 in zip(liste1, liste2):
        if bit_poids_faible(pixel1) != bit_poids_faible(pixel2):
            binaire_pixel.append(pixel1)
    return binaire_pixel

def image_poid_faible(image):
    i = Image.open(image)
    binaire = ""
    with open("image_poid_faible.txt", "w") as f:
        f.write("")
        for pixel in Image.Image.getdata(i):
            binaire += bit_poids_faible(pixel)
        f.write(binaire)
    return binaire
    

liste = pixel_binaire_different("rossignol.bmp", "stegano_4.bmp")
image_poid_faible("stegano_4.bmp")


cle

cle

print(cle == cle2)

def bin_octet(bin):
    return [int(bin[i:i+8], 2) for i in range(0, len(bin), 8)]

def bin_to_hex(bin):
    return hex(int(bin, 2))[2:]

def hex_bin(hex):
    return bin(int(hex, 16))[2:]
    
print(len(hex_bin("480fff36676493321c1be046c1490791233e197314425d1a6829b3585e1d6d7b4f407bdc3ebf778f3d1e3de4366e9a67")))

print(bin_to_hex("10010000000111111111111001101100110011101100100100100110011001000011100000110111110000001000110110000010100100100000111100100010010001100111110000110010111001100010100010000100101110100011010011010000010100110110011010110000101111000011101011011010111101101001111010000000111101111011100001111101011111101110111100011110011110100011110001111011110010000110110011011101001101001100111"))